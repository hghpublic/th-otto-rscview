/*
 * GEM resource C output of fo_al
 *
 * created by ORCS 2.18
 */

#if !defined(__GNUC__) || !defined(__mc68000__)
#include <portab.h>
#endif

#ifndef __STDC__
# ifdef __PUREC__
#  define __STDC__ 1
# endif
#endif

#ifdef OS_WINDOWS
#  include <portaes.h>
#  define SHORT _WORD
#  ifdef __WIN32__
#    define _WORD signed short
#  else
#    define _WORD signed int
 #   pragma option -zE_FARDATA
#  endif
#else
#  ifdef __TURBOC__
#    include <aes.h>
#    define CP (_WORD *)
#  endif
#endif

#ifdef OS_UNIX
#  include <portaes.h>
#  define SHORT _WORD
#else
#  ifdef __GNUC__
#    ifndef __PORTAES_H__
#      if __GNUC__ < 4
#        include <aesbind.h>
#        ifndef _WORD
#          define _WORD int
#        endif
#        define CP (char *)
#      else
#        include <mt_gem.h>
#        ifndef _WORD
#          define _WORD short
#        endif
#        define CP (short *)
#      endif
#      define CW (short *)
#    endif
#  endif
#endif


#ifdef __SOZOBONX__
#  include <xgemfast.h>
#else
#  ifdef SOZOBON
#    include <aes.h>
#  endif
#endif

#ifdef MEGAMAX
#  include <gembind.h>
#  include <gemdefs.h>
#  include <obdefs.h>
#  define _WORD int
#  define SHORT int
#endif

#ifndef _VOID
#  define _VOID void
#endif

#ifndef OS_NORMAL
#  define OS_NORMAL 0x0000
#endif
#ifndef OS_SELECTED
#  define OS_SELECTED 0x0001
#endif
#ifndef OS_CROSSED
#  define OS_CROSSED 0x0002
#endif
#ifndef OS_CHECKED
#  define OS_CHECKED 0x0004
#endif
#ifndef OS_DISABLED
#  define OS_DISABLED 0x0008
#endif
#ifndef OS_OUTLINED
#  define OS_OUTLINED 0x0010
#endif
#ifndef OS_SHADOWED
#  define OS_SHADOWED 0x0020
#endif
#ifndef OS_WHITEBAK
#  define OS_WHITEBAK 0x0040
#endif
#ifndef OS_DRAW3D
#  define OS_DRAW3D 0x0080
#endif

#ifndef OF_NONE
#  define OF_NONE 0x0000
#endif
#ifndef OF_SELECTABLE
#  define OF_SELECTABLE 0x0001
#endif
#ifndef OF_DEFAULT
#  define OF_DEFAULT 0x0002
#endif
#ifndef OF_EXIT
#  define OF_EXIT 0x0004
#endif
#ifndef OF_EDITABLE
#  define OF_EDITABLE 0x0008
#endif
#ifndef OF_RBUTTON
#  define OF_RBUTTON 0x0010
#endif
#ifndef OF_LASTOB
#  define OF_LASTOB 0x0020
#endif
#ifndef OF_TOUCHEXIT
#  define OF_TOUCHEXIT 0x0040
#endif
#ifndef OF_HIDETREE
#  define OF_HIDETREE 0x0080
#endif
#ifndef OF_INDIRECT
#  define OF_INDIRECT 0x0100
#endif
#ifndef OF_FL3DIND
#  define OF_FL3DIND 0x0200
#endif
#ifndef OF_FL3DBAK
#  define OF_FL3DBAK 0x0400
#endif
#ifndef OF_FL3DACT
#  define OF_FL3DACT 0x0600
#endif
#ifndef OF_MOVEABLE
#  define OF_MOVEABLE 0x0800
#endif
#ifndef OF_POPUP
#  define OF_POPUP 0x1000
#endif

#ifndef R_CICONBLK
#  define R_CICONBLK 17
#endif
#ifndef R_CICON
#  define R_CICON 18
#endif

#ifndef G_SWBUTTON
#  define G_SWBUTTON 34
#endif
#ifndef G_POPUP
#  define G_POPUP 35
#endif
#ifndef G_EDIT
#  define G_EDIT 37
#endif
#ifndef G_SHORTCUT
#  define G_SHORTCUT 38
#endif
#ifndef G_SLIST
#  define G_SLIST 39
#endif
#ifndef G_EXTBOX
#  define G_EXTBOX 40
#endif
#ifndef G_OBLINK
#  define G_OBLINK 41
#endif

#ifndef _WORD
#  ifdef WORD
#    define _WORD WORD
#  else
#    ifdef __PUREC__
#      define _WORD int
#    else
#      define _WORD short
#    endif
#  endif
#endif

#ifndef _UBYTE
#  define _UBYTE char
#endif

#ifndef _BOOL
#  define _BOOL int
#endif

#ifndef _LONG
#  ifdef LONG
#    define _LONG LONG
#  else
#    define _LONG long
#  endif
#endif

#ifndef _ULONG
#  ifdef ULONG
#    define _ULONG ULONG
#  else
#    define _ULONG unsigned long
#  endif
#endif

#ifndef _LONG_PTR
#  define _LONG_PTR _LONG
#endif

#ifndef C_UNION
#ifdef __PORTAES_H__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __GEMLIB__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __PUREC__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __ALCYON__
#  define C_UNION(x) x
#endif
#endif
#ifndef C_UNION
#  define C_UNION(x) (_LONG_PTR)(x)
#endif

#ifndef SHORT
#  define SHORT short
#endif

#ifndef CP
#  define CP (SHORT *)
#endif

#ifndef CW
#  define CW (_WORD *)
#endif


#undef RSC_STATIC_FILE
#define RSC_STATIC_FILE 1

#include "fo_al.h"

#ifndef RSC_NAMED_FUNCTIONS
#  define RSC_NAMED_FUNCTIONS 0
#endif

#ifndef __ALCYON__
#undef defRSHInit
#undef defRSHInitBit
#undef defRSHInitStr
#ifndef RsArraySize
#define RsArraySize(array) (_WORD)(sizeof(array)/sizeof(array[0]))
#define RsPtrArraySize(type, array) (type *)array, RsArraySize(array)
#endif
#define defRSHInit( aa, bb ) RSHInit( aa, bb, RsPtrArraySize(OBJECT *, rs_trindex), RsArraySize(rs_object) )
#define defRSHInitBit( aa, bb ) RSHInitBit( aa, bb, RsPtrArraySize(BITBLK *, rs_frimg) )
#define defRSHInitStr( aa, bb ) RSHInitStr( aa, bb, RsPtrArraySize(_UBYTE *, rs_frstr) )
#endif

#ifdef __STDC__
#ifndef W_Cicon_Setpalette
extern _BOOL W_Cicon_Setpalette(_WORD *_palette);
#endif
#ifndef hrelease_objs
extern void hrelease_objs(OBJECT *_ob, _WORD _num_objs);
#endif
#ifndef hfix_objs
extern void *hfix_objs(RSHDR *_hdr, OBJECT *_ob, _WORD _num_objs);
#endif
#endif

#ifndef RLOCAL
#  if RSC_STATIC_FILE
#    ifdef LOCAL
#      define RLOCAL LOCAL
#    else
#      define RLOCAL static
#    endif
#  else
#    define RLOCAL
#  endif
#endif


#ifndef N_
#  define N_(x)
#endif


#if RSC_STATIC_FILE
#undef NUM_STRINGS
#undef NUM_BB
#undef NUM_IB
#undef NUM_CIB
#undef NUM_CIC
#undef NUM_TI
#undef NUM_FRSTR
#undef NUM_FRIMG
#undef NUM_OBS
#undef NUM_TREE
#undef NUM_UD
#define NUM_STRINGS 45
#define NUM_BB		0
#define NUM_IB		12
#define NUM_CIB     0
#define NUM_CIC     0
#define NUM_TI		5
#define NUM_FRSTR	0
#define NUM_FRIMG	0
#define NUM_OBS     38
#define NUM_TREE	3
#define NUM_UD		0
#endif


static char fo_al_string_0[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
static char fo_al_string_1[] = "1";
static char fo_al_string_2[] = "";
static char fo_al_string_3[] = "";
static char fo_al_string_4[] = "1";
static char fo_al_string_5[] = "";
static char fo_al_string_6[] = "";
static char fo_al_string_7[] = "1";
static char fo_al_string_8[] = "";
static char fo_al_string_9[] = "";
static char fo_al_string_10[] = "1";
static char fo_al_string_11[] = "";
static char fo_al_string_12[] = "";
static char fo_al_string_13[] = "1";
static char fo_al_string_14[] = "";
static char fo_al_string_15[] = "";
static char fo_al_string_16[] = "1";
static char fo_al_string_17[] = "1";
static char fo_al_string_18[] = "1";
static char fo_al_string_19[] = "1";
static char fo_al_string_20[] = "";
static char fo_al_string_21[] = "";
static char fo_al_string_22[] = "";
static char fo_al_string_23[] = "";
static char fo_al_string_24[] = "";
static char fo_al_string_25[] = "";
static char fo_al_string_26[] = "";
static char fo_al_string_27[] = "";
static char fo_al_string_28[] = "";
static char fo_al_string_29[] = "Tip:";
static char fo_al_string_30[] = "Attention:";
static char fo_al_string_31[] = "Question:";
static char fo_al_string_32[] = "Be careful:";
static char fo_al_string_33[] = "Attention:";
static char fo_al_string_34[] = "Disk operation:";
static char fo_al_string_35[] = "Error:";
static char fo_al_string_36[] = "Question:";
static char fo_al_string_37[] = "Stop:";
static char fo_al_string_38[] = "Delete/discard ?";
static char fo_al_string_39[] = "Attention:";
static char fo_al_string_40[] = "Question:";
static char fo_al_string_41[] = "Be careful:";
static char fo_al_string_42[] = "";
static char fo_al_string_43[] = "";
static char fo_al_string_44[] = "";


/* mask of IC_ICON_ATTENTION */
static _UBYTE fo_al_IMAGE0[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x07, 0xE0, 0x00, 
0x00, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x7F, 0xFE, 0x00, 
0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xE0, 
0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 
0x07, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x00, 
0x00, 0x7F, 0xFE, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x0F, 0xF0, 0x00, 
0x00, 0x07, 0xE0, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00};

/* data of IC_ICON_ATTENTION */
static _UBYTE fo_al_IMAGE1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x02, 0x40, 0x00, 
0x00, 0x04, 0x20, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x13, 0xC8, 0x00, 0x00, 0x27, 0xE4, 0x00, 
0x00, 0x4F, 0xF2, 0x00, 0x00, 0x9F, 0xF9, 0x00, 0x01, 0x3C, 0x3C, 0x80, 0x02, 0x7C, 0x3E, 0x40, 
0x04, 0xFC, 0x3F, 0x20, 0x09, 0xFC, 0x3F, 0x90, 0x13, 0xFC, 0x3F, 0xC8, 0x27, 0xFC, 0x3F, 0xE4, 
0x4F, 0xFC, 0x3F, 0xF2, 0x9F, 0xFC, 0x3F, 0xF9, 0x9F, 0xFC, 0x3F, 0xF9, 0x4F, 0xFC, 0x3F, 0xF2, 
0x27, 0xFC, 0x3F, 0xE4, 0x13, 0xFC, 0x3F, 0xC8, 0x09, 0xFF, 0xFF, 0x90, 0x04, 0xFF, 0xFF, 0x20, 
0x02, 0x7C, 0x3E, 0x40, 0x01, 0x3C, 0x3C, 0x80, 0x00, 0x9F, 0xF9, 0x00, 0x00, 0x4F, 0xF2, 0x00, 
0x00, 0x27, 0xE4, 0x00, 0x00, 0x13, 0xC8, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x04, 0x20, 0x00, 
0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_QUESTION */
static _UBYTE fo_al_IMAGE2[] = {
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xF8, 
0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xE0, 
0x07, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0x80, 
0x01, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 
0x00, 0x7F, 0xFE, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x1F, 0xF8, 0x00, 
0x00, 0x1F, 0xF8, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00, 
0x00, 0x07, 0xE0, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00};

/* data of IC_ICON_QUESTION */
static _UBYTE fo_al_IMAGE3[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x80, 0x00, 0x00, 0x01, 
0x9F, 0xFF, 0xFF, 0xF9, 0x4F, 0xE0, 0x0F, 0xF2, 0x4F, 0xC0, 0x07, 0xF2, 0x27, 0x87, 0xC3, 0xE4, 
0x27, 0xFF, 0xE3, 0xE4, 0x13, 0xFF, 0xE3, 0xC8, 0x13, 0xFF, 0xC7, 0xC8, 0x09, 0xFF, 0x0F, 0x90, 
0x09, 0xFE, 0x1F, 0x90, 0x04, 0xFC, 0x3F, 0x20, 0x04, 0xFC, 0x3F, 0x20, 0x02, 0x7C, 0x3E, 0x40, 
0x02, 0x7C, 0x3E, 0x40, 0x01, 0x3C, 0x3C, 0x80, 0x01, 0x3F, 0xFC, 0x80, 0x00, 0x9F, 0xF9, 0x00, 
0x00, 0x9C, 0x39, 0x00, 0x00, 0x4C, 0x32, 0x00, 0x00, 0x4F, 0xF2, 0x00, 0x00, 0x27, 0xE4, 0x00, 
0x00, 0x27, 0xE4, 0x00, 0x00, 0x13, 0xC8, 0x00, 0x00, 0x13, 0xC8, 0x00, 0x00, 0x09, 0x90, 0x00, 
0x00, 0x09, 0x90, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x02, 0x40, 0x00, 
0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_STOP */
static _UBYTE fo_al_IMAGE4[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x80, 
0x07, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xFF, 0xF8, 
0x7F, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xF8, 
0x1F, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0x80, 
0x01, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* data of IC_ICON_STOP */
static _UBYTE fo_al_IMAGE5[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x80, 0x02, 0x00, 
0x01, 0x3F, 0xF9, 0x00, 0x02, 0x7F, 0xFC, 0x80, 0x04, 0xFF, 0xFE, 0x40, 0x09, 0xFF, 0xFF, 0x20, 
0x13, 0xFF, 0xFF, 0x90, 0x27, 0xFF, 0xFF, 0xC8, 0x4F, 0xFF, 0xFF, 0xE4, 0x9F, 0xFF, 0xFF, 0xF2, 
0x9F, 0xFF, 0xFF, 0xF2, 0x9F, 0xFF, 0xFF, 0xF2, 0x98, 0xC1, 0x8C, 0x32, 0x97, 0x77, 0x75, 0xD2, 
0x97, 0xF7, 0x75, 0xD2, 0x98, 0xF7, 0x74, 0x32, 0x9F, 0x77, 0x75, 0xF2, 0x97, 0x77, 0x75, 0xF2, 
0x98, 0xF7, 0x8D, 0xF2, 0x9F, 0xFF, 0xFF, 0xF2, 0x9F, 0xFF, 0xFF, 0xF2, 0x9F, 0xFF, 0xFF, 0xF2, 
0x4F, 0xFF, 0xFF, 0xE4, 0x27, 0xFF, 0xFF, 0xC8, 0x13, 0xFF, 0xFF, 0x90, 0x09, 0xFF, 0xFF, 0x20, 
0x04, 0xFF, 0xFE, 0x40, 0x02, 0x7F, 0xFC, 0x80, 0x01, 0x3F, 0xF9, 0x00, 0x00, 0x80, 0x02, 0x00, 
0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_INFO */
static _UBYTE fo_al_IMAGE6[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 
0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 
0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0xFF, 0xFF, 0xFE, 
0x1F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 
0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFE, 
0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xF8, 
0x3F, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0x00, 
0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFE, 0x00};

/* data of IC_ICON_INFO */
static _UBYTE fo_al_IMAGE7[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x80, 
0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 
0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 
0x00, 0x79, 0xEF, 0x9C, 0x0E, 0xFB, 0xEF, 0xBC, 0x1E, 0xFB, 0xEF, 0xBC, 0x1E, 0xFB, 0xEF, 0x7C, 
0x16, 0xAA, 0xAF, 0x7C, 0x1E, 0xFB, 0xEF, 0x7C, 0x0D, 0x75, 0xDC, 0xBC, 0x03, 0x8E, 0x37, 0xF8, 
0x1F, 0xFF, 0xDF, 0xF8, 0x1F, 0xFF, 0x7F, 0xF0, 0x1F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFD, 0xFF, 0xE0, 
0x1F, 0xFF, 0xFF, 0xC0, 0x0F, 0xFD, 0xFF, 0x80, 0x07, 0xFF, 0xFE, 0x00, 0x01, 0xFF, 0xF4, 0x00, 
0x01, 0x5F, 0xFC, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_DISK */
static _UBYTE fo_al_IMAGE8[] = {
0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 
0x1F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFE, 
0x1F, 0xFF, 0xFF, 0xFC, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* data of IC_ICON_DISK */
static _UBYTE fo_al_IMAGE9[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x0A, 0x40, 0x00, 0x2B, 
0x18, 0xC0, 0x00, 0x2D, 0x2A, 0x40, 0x00, 0x2F, 0x58, 0xC0, 0x00, 0x29, 0x2A, 0x40, 0x00, 0x23, 
0x58, 0xC0, 0x00, 0x29, 0x2A, 0x40, 0x00, 0x23, 0x58, 0xC0, 0x00, 0x29, 0x2A, 0x40, 0x00, 0x23, 
0x58, 0xC0, 0x00, 0x29, 0x2A, 0x40, 0x00, 0x23, 0x58, 0xBF, 0xFF, 0xC9, 0x2A, 0x22, 0x22, 0x23, 
0x58, 0x88, 0x88, 0x89, 0x2A, 0x22, 0x22, 0x23, 0x58, 0x8F, 0xFE, 0x89, 0x2A, 0x30, 0x01, 0x23, 
0x58, 0x93, 0x01, 0x89, 0x2A, 0x33, 0x01, 0x23, 0x58, 0x93, 0x01, 0x89, 0x2E, 0x33, 0x01, 0x23, 
0x5E, 0x90, 0x01, 0x89, 0x2F, 0xFF, 0xFF, 0xFF, 0x57, 0xB5, 0x55, 0x55, 0x2B, 0xFF, 0xFF, 0xFE, 
0x15, 0x55, 0x55, 0x54, 0x0A, 0xAA, 0xAA, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_ERROR */
static _UBYTE fo_al_IMAGE10[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0xF8, 
0x00, 0x01, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x03, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 
0x1F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFE, 0xFC, 0x3F, 0xFF, 0xFC, 0xFC, 0x7F, 0xFF, 0xFE, 0x00, 
0x7F, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
0x7F, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 
0x3F, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x03, 0xFF, 0xC0, 0x00, 
0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* data of IC_ICON_ERROR */
static _UBYTE fo_al_IMAGE11[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xC7, 0x90, 0x00, 0x00, 0xF8, 0x44, 0x00, 0x3D, 0xF8, 0x30, 0x01, 0xFF, 0xFC, 0xB2, 
0x07, 0xFF, 0xFC, 0x00, 0x0F, 0xFF, 0xF8, 0x48, 0x1F, 0x3F, 0xF8, 0x00, 0x1E, 0x67, 0xF8, 0x00, 
0x3F, 0xCF, 0xFC, 0x00, 0x3C, 0xFF, 0xFC, 0x00, 0x3C, 0x9F, 0xFC, 0x00, 0x7F, 0x9F, 0xFE, 0x00, 
0x7F, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 
0x3F, 0xFF, 0xFC, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 
0x0F, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x3C, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_QUESTION2 */
static _UBYTE fo_al_IMAGE12[] = {
0x00, 0x7F, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xE0, 
0x07, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xE0, 0x07, 0xF8, 0x1F, 0xE0, 0x07, 0xF0, 0x0F, 0xE0, 
0x07, 0xF0, 0x1F, 0xE0, 0x03, 0xE0, 0x3F, 0xE0, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0xFF, 0xC0, 
0x00, 0x01, 0xFF, 0x80, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x00, 0x0F, 0xFC, 0x00, 
0x00, 0x0F, 0xF8, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 
0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 
0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x3F, 0xE0, 0x00, 
0x00, 0x3F, 0xE0, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x1F, 0xC0, 0x00};

/* data of IC_ICON_QUESTION2 */
static _UBYTE fo_al_IMAGE13[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x80, 
0x03, 0xFF, 0xFF, 0xC0, 0x03, 0xF0, 0x0F, 0xC0, 0x03, 0xE0, 0x07, 0xC0, 0x03, 0xE0, 0x07, 0xC0, 
0x01, 0xC0, 0x07, 0xC0, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x3F, 0x00, 
0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x03, 0xF0, 0x00, 
0x00, 0x07, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 
0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 
0x00, 0x1F, 0xC0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_HALT */
static _UBYTE fo_al_IMAGE14[] = {
0x00, 0x03, 0xE0, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0xFF, 0xFF, 0xC0, 
0x3F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xC0, 
0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 
0x7F, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0x80, 
0x07, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0x00};

/* data of IC_ICON_HALT */
static _UBYTE fo_al_IMAGE15[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x73, 0xE0, 0x00, 0x00, 0xFB, 0xE7, 0x00, 
0x00, 0xFB, 0xEF, 0x80, 0x1C, 0xFB, 0xEF, 0x80, 0x3E, 0xFB, 0xEF, 0x80, 0x3E, 0xFB, 0xEF, 0x80, 
0x3E, 0xFB, 0xEF, 0x80, 0x3E, 0xFB, 0xEF, 0x80, 0x3E, 0xFB, 0xEF, 0x80, 0x3E, 0xFB, 0xEF, 0x80, 
0x3E, 0xFB, 0xEF, 0x9C, 0x3E, 0xFB, 0xEF, 0xBC, 0x3E, 0xFB, 0xEF, 0xBC, 0x3F, 0xFF, 0xFF, 0x7C, 
0x3F, 0xFF, 0xFF, 0x7C, 0x3F, 0xFF, 0xFF, 0x7C, 0x3F, 0xFF, 0xFE, 0xFC, 0x3F, 0xFF, 0xF7, 0xF8, 
0x3F, 0xFF, 0xDF, 0xF8, 0x3F, 0xFF, 0x7F, 0xF0, 0x3F, 0xFF, 0xFF, 0xF0, 0x3F, 0xFD, 0xFF, 0xE0, 
0x1F, 0xFD, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFE, 0x00, 
0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00};

/* mask of IC_ICON_RUBBISH */
static _UBYTE fo_al_IMAGE16[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xE0, 
0x07, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xF0, 
0x07, 0xFF, 0xFF, 0xF0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 
0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 
0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 
0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 
0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 
0x03, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x7F, 0xFF, 0x00};

/* data of IC_ICON_RUBBISH */
static _UBYTE fo_al_IMAGE17[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0xFE, 0xBF, 0x80, 
0x01, 0xC6, 0x31, 0xC0, 0x02, 0x00, 0x00, 0x20, 0x03, 0xC0, 0x01, 0xE0, 0x03, 0x7F, 0xFF, 0x60, 
0x01, 0x00, 0x00, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 
0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x8A, 0x40, 0x01, 0x44, 0xDA, 0x40, 
0x01, 0x44, 0x72, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 
0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 
0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x44, 0x22, 0x40, 0x01, 0x64, 0x26, 0x40, 
0x01, 0x86, 0x60, 0xC0, 0x00, 0xE0, 0x03, 0x80, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00};

static _UBYTE fo_al_IMAGE18[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFE};

static _UBYTE fo_al_IMAGE19[] = {
0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00};

static _UBYTE fo_al_IMAGE20[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFE};

static _UBYTE fo_al_IMAGE21[] = {
0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xE0, 0x07, 0xFE, 
0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x00, 0x00, 0xFE, 0x7E, 0x00, 0x00, 0x7E, 0x7E, 0x01, 0xC0, 0x7E, 
0x7E, 0x03, 0xC0, 0x7E, 0x7F, 0x07, 0x80, 0xFE, 0x7F, 0xFF, 0x01, 0xFE, 0x7F, 0xFE, 0x01, 0xFE, 
0x7F, 0xFC, 0x03, 0xFE, 0x7F, 0xF8, 0x07, 0xFE, 0x7F, 0xF8, 0x07, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00};

static _UBYTE fo_al_IMAGE22[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFE};

static _UBYTE fo_al_IMAGE23[] = {
0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFE, 0xFF, 0xFE, 
0x7F, 0xFC, 0x7F, 0xFE, 0x7F, 0xEC, 0x67, 0xFE, 0x7F, 0xC4, 0x47, 0xFE, 0x7F, 0xC4, 0x47, 0xFE, 
0x7F, 0x44, 0x47, 0xFE, 0x7E, 0x44, 0x47, 0xFE, 0x7E, 0x44, 0x47, 0xFE, 0x7E, 0x44, 0x47, 0xFE, 
0x7E, 0x44, 0x47, 0xFE, 0x7E, 0x44, 0x47, 0xFE, 0x7E, 0x40, 0x07, 0x1E, 0x7E, 0x00, 0x06, 0x1E, 
0x7E, 0x00, 0x06, 0x1E, 0x7E, 0x00, 0x04, 0x3E, 0x7E, 0x00, 0x00, 0x3E, 0x7E, 0x00, 0x00, 0x7E, 
0x7E, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0xFE, 0x7E, 0x00, 0x00, 0xFE, 0x7E, 0x00, 0x01, 0xFE, 
0x7E, 0x00, 0x01, 0xFE, 0x7E, 0x04, 0x03, 0xFE, 0x7F, 0x02, 0x07, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00};


static ICONBLK rs_iconblk[] = {
	{ CW fo_al_IMAGE0, CW fo_al_IMAGE1, fo_al_string_20, 0x1000,0,0, 0,0,32,36, 0,0,0,8 },
	{ CW fo_al_IMAGE2, CW fo_al_IMAGE3, fo_al_string_21, 0x1000,0,0, 0,0,32,36, 0,0,0,8 },
	{ CW fo_al_IMAGE4, CW fo_al_IMAGE5, fo_al_string_22, 0x2000,0,0, 0,0,32,36, 0,0,0,8 },
	{ CW fo_al_IMAGE6, CW fo_al_IMAGE7, fo_al_string_23, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE8, CW fo_al_IMAGE9, fo_al_string_24, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE10, CW fo_al_IMAGE11, fo_al_string_25, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE12, CW fo_al_IMAGE13, fo_al_string_26, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE14, CW fo_al_IMAGE15, fo_al_string_27, 0x2000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE16, CW fo_al_IMAGE17, fo_al_string_28, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE18, CW fo_al_IMAGE19, fo_al_string_42, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE20, CW fo_al_IMAGE21, fo_al_string_43, 0x1000,0,0, 0,0,32,32, 0,0,0,8 },
	{ CW fo_al_IMAGE22, CW fo_al_IMAGE23, fo_al_string_44, 0x1000,0,0, 0,0,32,32, 0,0,0,8 }
};


static TEDINFO rs_tedinfo[NUM_TI] = {
	{ fo_al_string_1, fo_al_string_2, fo_al_string_3, IBM, 0, TE_CNTR, 0x1100, 0x0, 0, 2,1 }, /* FA_TEXT */
	{ fo_al_string_4, fo_al_string_5, fo_al_string_6, IBM, 0, TE_CNTR, 0x1100, 0x0, 0, 2,1 },
	{ fo_al_string_7, fo_al_string_8, fo_al_string_9, IBM, 0, TE_CNTR, 0x1100, 0x0, 0, 2,1 },
	{ fo_al_string_10, fo_al_string_11, fo_al_string_12, IBM, 0, TE_CNTR, 0x1100, 0x0, 0, 2,1 },
	{ fo_al_string_13, fo_al_string_14, fo_al_string_15, IBM, 0, TE_CNTR, 0x1100, 0x0, 0, 2,1 }
};


static OBJECT rs_object[NUM_OBS] = {
/* F_ALERT */

	{ -1, 1, 10, G_BOX, OF_FL3DBAK, OS_OUTLINED, C_UNION(0x11100L), 0,0, 64,14 },
	{ 2, -1, -1, (31<<8)+G_BUTTON, OF_TOUCHEXIT, OS_DRAW3D, C_UNION(fo_al_string_0), 0,0, 64,2049 }, /* FA_TITLE */
	{ 3, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[0]), 7,4, 56,1 }, /* FA_TEXT */
	{ 4, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[1]), 7,5, 56,1 },
	{ 5, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[2]), 7,6, 56,1 },
	{ 6, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[3]), 7,7, 56,1 },
	{ 7, -1, -1, G_TEXT, OF_NONE, OS_NORMAL, C_UNION(&rs_tedinfo[4]), 7,8, 56,1 },
	{ 8, -1, -1, (60<<8)+G_BUTTON, 0x5, OS_NORMAL, C_UNION(fo_al_string_16), 8,11, 12,1 }, /* FA_BUTTON */
	{ 9, -1, -1, (60<<8)+G_BUTTON, 0x5, OS_NORMAL, C_UNION(fo_al_string_17), 22,11, 11,1 },
	{ 10, -1, -1, (60<<8)+G_BUTTON, 0x5, OS_NORMAL, C_UNION(fo_al_string_18), 35,11, 12,1 },
	{ 0, -1, -1, (60<<8)+G_BUTTON, 0x25, OS_NORMAL, C_UNION(fo_al_string_19), 50,11, 12,1 },

/* ICONS */

	{ -1, 1, 19, G_BOX, OF_FL3DBAK, OS_OUTLINED, C_UNION(0x11100L), 0,0, 64,34 },
	{ 2, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[0]), 2,3, 8192,12288 }, /* IC_ICON_ATTENTION */
	{ 3, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[1]), 2,6, 8192,12288 }, /* IC_ICON_QUESTION */
	{ 4, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[2]), 2,9, 8192,12288 }, /* IC_ICON_STOP */
	{ 5, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[3]), 2,12, 8192,8192 }, /* IC_ICON_INFO */
	{ 6, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[4]), 2,15, 8192,8192 }, /* IC_ICON_DISK */
	{ 7, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[5]), 2,18, 8192,8192 }, /* IC_ICON_ERROR */
	{ 8, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[6]), 2,21, 8192,8192 }, /* IC_ICON_QUESTION2 */
	{ 9, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[7]), 2,24, 8192,8192 }, /* IC_ICON_HALT */
	{ 10, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[8]), 2,27, 8192,8192 }, /* IC_ICON_RUBBISH */
	{ 11, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_29), 12,2, 4,1 }, /* IC_TEXT_TIP */
	{ 12, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_30), 12,4, 10,1 }, /* IC_TEXT_ATTENTION */
	{ 13, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_31), 12,7, 9,1 }, /* IC_TEXT_QUESTION */
	{ 14, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_32), 12,10, 11,1 }, /* IC_TEXT_STOP */
	{ 15, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_33), 12,13, 10,1 }, /* IC_TEXT_INFO */
	{ 16, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_34), 12,16, 15,1 }, /* IC_TEXT_DISK */
	{ 17, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_35), 12,19, 6,1 }, /* IC_TEXT_ERROR */
	{ 18, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_36), 12,22, 9,1 }, /* IC_TEXT_QUESTION2 */
	{ 19, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_37), 12,25, 5,1 }, /* IC_TEXT_HALT */
	{ 0, -1, -1, G_STRING, OF_LASTOB, OS_NORMAL, C_UNION(fo_al_string_38), 12,28, 16,1 }, /* IC_TEXT_RUBBISH */

/* ICONS2 */

	{ -1, 1, 6, G_BOX, OF_FL3DBAK, OS_OUTLINED, C_UNION(0x11100L), 0,0, 64,30 },
	{ 2, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_39), 12,4, 10,1 },
	{ 3, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_40), 12,7, 9,1 },
	{ 4, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(fo_al_string_41), 12,10, 11,1 },
	{ 5, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[9]), 2,3, 8192,8192 },
	{ 6, -1, -1, G_ICON, OF_NONE, OS_NORMAL, C_UNION(&rs_iconblk[10]), 2,6, 8192,8192 },
	{ 0, -1, -1, G_ICON, OF_LASTOB, OS_NORMAL, C_UNION(&rs_iconblk[11]), 2,9, 8192,8192 }
};


static OBJECT *rs_trindex[NUM_TREE] = {
	&rs_object[0], /* F_ALERT */
	&rs_object[11], /* ICONS */
	&rs_object[31] /* ICONS2 */
};





#if RSC_STATIC_FILE

#if RSC_NAMED_FUNCTIONS
#ifdef __STDC__
_WORD fo_al_rsc_load(_WORD wchar, _WORD hchar)
#else
_WORD fo_al_rsc_load(wchar, hchar)
_WORD wchar;
_WORD wchar;
#endif
{
#ifndef RSC_HAS_PALETTE
#  define RSC_HAS_PALETTE 0
#endif
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if RSC_HAS_PALETTE || RSC_USE_PALETTE
	W_Cicon_Setpalette(&rgb_palette[0][0]);
#endif
#if NUM_OBS != 0
	{
		_WORD Obj;
		OBJECT *tree;
		for (Obj = 0, tree = rs_object; Obj < NUM_OBS; Obj++, tree++)
		{
			tree->ob_x = wchar * (tree->ob_x & 0xff) + (tree->ob_x >> 8);
			tree->ob_y = hchar * (tree->ob_y & 0xff) + (tree->ob_y >> 8);
			tree->ob_width = wchar * (tree->ob_width & 0xff) + (tree->ob_width >> 8);
			tree->ob_height = hchar * (tree->ob_height & 0xff) + (tree->ob_height >> 8);
		}
		hfix_objs(NULL, rs_object, NUM_OBS);
	}
#endif
	return 1;
}


#ifdef __STDC__
_WORD fo_al_rsc_gaddr(_WORD type, _WORD idx, void *gaddr)
#else
_WORD fo_al_rsc_gaddr(type, idx, gaddr)
_WORD type;
_WORD idx;
void *gaddr;
#endif
{
	switch (type)
	{
#if NUM_TREE != 0
	case R_TREE:
		if (idx < 0 || idx >= NUM_TREE)
			return 0;
		*((OBJECT **)gaddr) = rs_trindex[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBJECT:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((OBJECT **)gaddr) = &rs_object[idx];
		break;
#endif
#if NUM_TI != 0
	case R_TEDINFO:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((TEDINFO **)gaddr) = &rs_tedinfo[idx];
		break;
#endif
#if NUM_IB != 0
	case R_ICONBLK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((ICONBLK **)gaddr) = &rs_iconblk[idx];
		break;
#endif
#if NUM_BB != 0
	case R_BITBLK:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((BITBLK **)gaddr) = &rs_bitblk[idx];
		break;
#endif
#if NUM_FRSTR != 0
	case R_STRING:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char **)gaddr) = (char *)(rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_IMAGEDATA:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK **)gaddr) = rs_frimg[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBSPEC:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((_LONG_PTR **)gaddr) = &rs_object[idx].ob_spec.index;
		break;
#endif
#if NUM_TI != 0
	case R_TEPTEXT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptext);
		break;
#endif
#if NUM_TI != 0
	case R_TEPTMPLT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptmplt);
		break;
#endif
#if NUM_TI != 0
	case R_TEPVALID:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_pvalid);
		break;
#endif
#if NUM_IB != 0
	case R_IBPMASK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pmask);
		break;
#endif
#if NUM_IB != 0
	case R_IBPDATA:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pdata);
		break;
#endif
#if NUM_IB != 0
	case R_IBPTEXT:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_ptext);
		break;
#endif
#if NUM_BB != 0
	case R_BIPDATA:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_bitblk[idx].bi_pdata);
		break;
#endif
#if NUM_FRSTR != 0
	case R_FRSTR:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_FRIMG:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK ***)gaddr) = &rs_frimg[idx];
		break;
#endif
	default:
		return 0;
	}
	return 1;
}


#ifdef __STDC__
_WORD fo_al_rsc_free(void)
#else
_WORD fo_al_rsc_free()
#endif
{
#if NUM_OBS != 0
	hrelease_objs(rs_object, NUM_OBS);
#endif
	return 1;
}

#endif /* RSC_NAMED_FUNCTIONS */

#else /* !RSC_STATIC_FILE */
#if 0
_WORD rs_numstrings = 45;
_WORD rs_numfrstr = 0;

_WORD rs_nuser = 0;
_WORD rs_numimages = 24;
_WORD rs_numbb = 0;
_WORD rs_numfrimg = 0;
_WORD rs_numib = 12;
_WORD rs_numcib = 0;
_WORD rs_numti = 5;
_WORD rs_numobs = 38;
_WORD rs_numtree = 3;

char rs_name[] = "fo_al.rsc";

_WORD _rsc_format = 2; /* RSC_FORM_SOURCE2 */
#endif
#endif /* RSC_STATIC_FILE */
