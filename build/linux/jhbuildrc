# -*- mode: python -*-
# -*- coding: utf-8 -*-
#
# Copyright (C) Tristan Van Berkom <tristan@upstairslabs.com>
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Authors:
#   Tristan Van Berkom <tristan@upstairslabs.com>
#
use_local_modulesets = True
modulesets_dir = os.getenv('BUNDLE_DIR') + '/modulesets'
moduleset = 'bundle.modules'

# Unset autogenargs (screws with some modules like freetype)
autogenargs = ''

# This causes jhbuild to fire some sort of warning, but no problem...
build_cflags = ''

# _FORTIFY_SOURCE can be defined by default in some compilers
# we want to unset this because glibc's runtime checkers are only
# available in recent versions of glibc
build_cflags += ' -U_FORTIFY_SOURCE'

# Include the libcwrap.h before anything else for every source, this
# ensures we are targetting the right version of glibc
build_cflags += ' -include ' + os.getenv('BUNDLE_DIR') + '/libcwrap.h'

# Set the compiler flags for both C and C++ sources, overriding CC and CXX
# ensures that they come before any flags that any buildscripts might add
os.environ['CC']  = 'gcc ' + build_cflags
os.environ['CXX'] = 'g++ ' + build_cflags

# Enable our custom triggers
os.environ['JHBUILD_TRIGGERS'] = os.getenv('BUNDLE_DIR') + '/triggers'

# A list of the modules to build.
modules = [ 'glade' ]

# Where to put the tarballs, sources and install prefix
if os.environ.get('BUNDLE_ROOT') is not None:
    tarballdir = os.environ.get('BUNDLE_ROOT') + '/Tarballs'
    checkoutroot = os.environ.get('BUNDLE_ROOT') + '/Sources'
    prefix = os.environ.get('BUNDLE_ROOT') + '/Install'
else:
    tarballdir = '~/AppImages/Tarballs'
    checkoutroot = '~/AppImages/Sources'
    prefix = '~/AppImages/Install'

# Dont put anything into a lib64 directory, whether we build for
# 32bit linux or 64bit linux, we want a constant path for the libraries
use_lib64 = False

# Uncomment this for verbose builds
# makeargs = "V=1"

